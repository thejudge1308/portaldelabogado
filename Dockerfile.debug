# Dockerfile.debug - Versi√≥n simplificada para debugging
FROM node:18-alpine AS angular-builder

WORKDIR /app

# Copiar archivos de Angular
COPY Web/package*.json ./
RUN npm ci --production=false

COPY Web/src ./src
COPY Web/public ./public
COPY Web/angular.json ./
COPY Web/tsconfig*.json ./
COPY Web/proxy.conf*.json ./

# Build Angular
RUN npm run build -- --configuration docker-prod

# Listar archivos generados para debug
RUN echo "üìÅ Archivos en /app/dist:" && ls -la dist/ || echo "‚ùå No hay dist/"
RUN echo "üìÅ Archivos en /app:" && ls -la 

# ===========================
# Stage 2: Golang + Debug
# ===========================
FROM golang:1.23-alpine AS final

RUN apk add --no-cache git ca-certificates

WORKDIR /app

# Copiar Go files
COPY Api/go.mod Api/go.sum ./
RUN go mod download

COPY Api/main.go ./

# Copiar archivos de Angular
COPY --from=angular-builder /app/dist/ ./portaldelabogado/

# Debug: Ver qu√© se copi√≥
RUN echo "üîç Debug - Archivos copiados a ./portaldelabogado/:" && ls -la portaldelabogado/ || echo "‚ùå No hay portaldelabogado/"
RUN echo "üîç Debug - Archivos en /app:" && ls -la 

# Build Go
RUN go build -o portal-abogados-spa main.go

EXPOSE 8080

CMD ["./portal-abogados-spa"]
